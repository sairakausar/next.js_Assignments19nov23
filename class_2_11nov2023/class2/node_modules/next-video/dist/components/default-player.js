import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { forwardRef } from "react";
import MuxPlayer from "@mux/mux-player-react";
import { getPosterURLFromPlaybackId } from "./utils.js";
export * from "@mux/mux-player-react";
const DefaultPlayer = forwardRef((allProps, forwardedRef) => {
  let {
    style,
    children,
    asset,
    controls,
    poster,
    blurDataURL,
    ...rest
  } = allProps;
  const props = rest;
  const imgStyleProps = {};
  const playbackId = asset?.externalIds?.playbackId;
  let isCustomPoster = true;
  let srcSet;
  if (playbackId && asset?.status === "ready") {
    props.src = null;
    props.playbackId = playbackId;
    if (poster) {
      isCustomPoster = poster !== getPosterURLFromPlaybackId(playbackId, props);
      if (!isCustomPoster) {
        srcSet = `${getPosterURLFromPlaybackId(playbackId, { ...props, width: 480 })} 480w,${getPosterURLFromPlaybackId(playbackId, { ...props, width: 640 })} 640w,${getPosterURLFromPlaybackId(playbackId, { ...props, width: 960 })} 960w,${getPosterURLFromPlaybackId(playbackId, { ...props, width: 1280 })} 1280w,${getPosterURLFromPlaybackId(playbackId, { ...props, width: 1600 })} 1600w,${poster} 1920w`;
      }
    }
  }
  if (blurDataURL) {
    const showGeneratedBlur = !isCustomPoster && blurDataURL === asset?.blurDataURL;
    const showCustomBlur = isCustomPoster && blurDataURL !== asset?.blurDataURL;
    if (showGeneratedBlur || showCustomBlur) {
      imgStyleProps.backgroundImage = `url('${blurDataURL}')`;
    }
  }
  if (poster) {
    children = /* @__PURE__ */ jsxs(Fragment, { children: [
      children,
      /* @__PURE__ */ jsx(
        "img",
        {
          slot: "poster",
          src: isCustomPoster ? poster : void 0,
          srcSet,
          style: imgStyleProps,
          "aria-hidden": "true"
        }
      )
    ] });
    poster = "";
  }
  return /* @__PURE__ */ jsx(
    MuxPlayer,
    {
      ref: forwardedRef,
      style: {
        "--controls": controls === false ? "none" : void 0,
        ...style
      },
      children,
      poster,
      ...props
    }
  );
});
export {
  DefaultPlayer
};
