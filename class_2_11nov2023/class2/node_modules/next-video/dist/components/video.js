"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import { forwardRef, useState } from "react";
import { DefaultPlayer } from "./default-player.js";
import { Alert } from "./alert.js";
import { createVideoRequest, defaultLoader } from "./video-loader.js";
import { getPosterURLFromPlaybackId, toSymlinkPath, usePolling } from "./utils.js";
const DEV_MODE = true;
const NextVideo = forwardRef((props, forwardedRef) => {
  let {
    as: VideoPlayer = DefaultPlayer,
    loader = defaultLoader,
    src,
    width,
    height
  } = props;
  let [asset, setAsset] = useState(typeof src === "object" ? src : void 0);
  const [playing, setPlaying] = useState(false);
  if (typeof src === "object") {
    asset = src;
    src = void 0;
  }
  const loaderProps = { src, width, height };
  const request = createVideoRequest(loader, loaderProps, (json) => setAsset(json));
  const status = asset?.status;
  const needsPolling = DEV_MODE && (typeof src === "string" && status != "ready");
  usePolling(request, needsPolling ? 1e3 : null);
  const videoProps = getVideoProps({ ...props, src }, { asset });
  return /* @__PURE__ */ jsxs("div", { className: "next-video-container", children: [
    /* @__PURE__ */ jsx("style", {
      /* css */
      children: `
        .next-video-container {
          position: relative;
          width: 100%;
        }

        [data-next-video] {
          position: relative;
          width: 100%;
          aspect-ratio: 16 / 9;
          display: inline-block;
          line-height: 0;
        }

        [data-next-video] img {
          object-fit: var(--media-object-fit, contain);
          object-position: var(--media-object-position, center);
          background: center / var(--media-object-fit, contain) no-repeat transparent;
          width: 100%;
          height: 100%;
        }
        `
    }),
    /* @__PURE__ */ jsx(
      VideoPlayer,
      {
        ref: forwardedRef,
        "data-next-video": status ?? "",
        style: { width, height },
        asset,
        onPlaying: () => setPlaying(true),
        onPause: () => setPlaying(false),
        ...videoProps
      }
    ),
    DEV_MODE && /* @__PURE__ */ jsx(
      Alert,
      {
        hidden: Boolean(playing || !status || status === "ready"),
        status
      }
    )
  ] });
});
function getVideoProps(allProps, state) {
  const { asset } = state;
  const {
    controls = true,
    as,
    src,
    poster,
    blurDataURL,
    loader,
    ...rest
  } = allProps;
  const props = {
    src,
    controls,
    poster,
    blurDataURL,
    ...rest
  };
  if (asset) {
    if (asset.status === "ready") {
      props.blurDataURL ?? (props.blurDataURL = asset.blurDataURL);
      const playbackId = asset.externalIds?.playbackId;
      if (playbackId) {
        props.src = `https://stream.mux.com/${playbackId}.m3u8`;
        props.poster ?? (props.poster = getPosterURLFromPlaybackId(playbackId, props));
      } else if (asset.externalIds?.url) {
        props.src = asset.externalIds?.url;
      }
    } else {
      props.src = toSymlinkPath(asset.originalFilePath);
    }
  }
  return props;
}
var video_default = NextVideo;
export {
  video_default as default,
  getVideoProps
};
