"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var assets_exports = {};
__export(assets_exports, {
  createAsset: () => createAsset,
  getAsset: () => getAsset,
  updateAsset: () => updateAsset
});
module.exports = __toCommonJS(assets_exports);
var import_node_process = require("node:process");
var import_promises = require("node:fs/promises");
async function getAsset(filePath) {
  const assetPath = getAssetConfigPath(filePath);
  const file = await (0, import_promises.readFile)(assetPath);
  const asset = JSON.parse(file.toString());
  return asset;
}
async function createAsset(filePath, assetDetails) {
  const assetPath = getAssetConfigPath(filePath);
  const newAssetDetails = {
    ...assetDetails,
    status: "pending",
    originalFilePath: filePath,
    externalIds: {},
    createdAt: Date.now(),
    updatedAt: Date.now()
  };
  try {
    await (0, import_promises.writeFile)(assetPath, JSON.stringify(newAssetDetails), { flag: "wx" });
  } catch (err) {
    if (err.code === "EEXIST") {
      return;
    }
    throw err;
  }
  return newAssetDetails;
}
async function updateAsset(filePath, assetDetails) {
  const assetPath = getAssetConfigPath(filePath);
  const currentAsset = await getAsset(filePath);
  const newAssetDetails = {
    ...currentAsset,
    ...assetDetails,
    externalIds: {
      ...currentAsset?.externalIds,
      ...assetDetails.externalIds
    },
    updatedAt: Date.now()
  };
  await (0, import_promises.writeFile)(assetPath, JSON.stringify(newAssetDetails));
  return newAssetDetails;
}
function getAssetConfigPath(filePath) {
  if (isRemote(filePath)) {
    const VIDEOS_DIR = JSON.parse(import_node_process.env["__NEXT_VIDEO_OPTS"] ?? "{}").folder;
    if (!VIDEOS_DIR)
      throw new Error("Missing video `folder` config.");
    return `${VIDEOS_DIR}/${toSafePath(filePath)}.json`;
  }
  return `${filePath}.json`;
}
function isRemote(filePath) {
  return /^https?:\/\//.test(filePath);
}
function toSafePath(str) {
  return str.replace(/^[^a-zA-Z0-9]+|[^a-zA-Z0-9]+$/g, "").replace(/[^a-zA-Z0-9._-]+/g, "_");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createAsset,
  getAsset,
  updateAsset
});
